// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/frr/dbus (interfaces: System,Connection)
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock_dbus.go . System,Connection
//

// Package mock_dbus is a generated GoMock package.
package mock_dbus

import (
	context "context"
	reflect "reflect"

	dbus "github.com/telekom/das-schiff-network-operator/pkg/frr/dbus"
	gomock "go.uber.org/mock/gomock"
)

// MockSystem is a mock of System interface.
type MockSystem struct {
	ctrl     *gomock.Controller
	recorder *MockSystemMockRecorder
	isgomock struct{}
}

// MockSystemMockRecorder is the mock recorder for MockSystem.
type MockSystemMockRecorder struct {
	mock *MockSystem
}

// NewMockSystem creates a new mock instance.
func NewMockSystem(ctrl *gomock.Controller) *MockSystem {
	mock := &MockSystem{ctrl: ctrl}
	mock.recorder = &MockSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystem) EXPECT() *MockSystemMockRecorder {
	return m.recorder
}

// NewConn mocks base method.
func (m *MockSystem) NewConn(ctx context.Context) (dbus.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewConn", ctx)
	ret0, _ := ret[0].(dbus.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewConn indicates an expected call of NewConn.
func (mr *MockSystemMockRecorder) NewConn(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewConn", reflect.TypeOf((*MockSystem)(nil).NewConn), ctx)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// GetUnitPropertiesContext mocks base method.
func (m *MockConnection) GetUnitPropertiesContext(ctx context.Context, unit string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitPropertiesContext", ctx, unit)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitPropertiesContext indicates an expected call of GetUnitPropertiesContext.
func (mr *MockConnectionMockRecorder) GetUnitPropertiesContext(ctx, unit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitPropertiesContext", reflect.TypeOf((*MockConnection)(nil).GetUnitPropertiesContext), ctx, unit)
}

// ReloadUnitContext mocks base method.
func (m *MockConnection) ReloadUnitContext(arg0 context.Context, arg1, arg2 string, arg3 chan<- string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadUnitContext", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadUnitContext indicates an expected call of ReloadUnitContext.
func (mr *MockConnectionMockRecorder) ReloadUnitContext(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadUnitContext", reflect.TypeOf((*MockConnection)(nil).ReloadUnitContext), arg0, arg1, arg2, arg3)
}

// RestartUnitContext mocks base method.
func (m *MockConnection) RestartUnitContext(ctx context.Context, name, mode string, ch chan<- string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartUnitContext", ctx, name, mode, ch)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartUnitContext indicates an expected call of RestartUnitContext.
func (mr *MockConnectionMockRecorder) RestartUnitContext(ctx, name, mode, ch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartUnitContext", reflect.TypeOf((*MockConnection)(nil).RestartUnitContext), ctx, name, mode, ch)
}
