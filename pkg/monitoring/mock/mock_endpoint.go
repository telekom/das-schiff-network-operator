// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/monitoring (interfaces: FRRClient)
//
// Generated by this command:
//
//	mockgen -destination ./mock/mock_endpoint.go . FRRClient
//

// Package mock_monitoring is a generated GoMock package.
package mock_monitoring

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFRRClient is a mock of FRRClient interface.
type MockFRRClient struct {
	ctrl     *gomock.Controller
	recorder *MockFRRClientMockRecorder
	isgomock struct{}
}

// MockFRRClientMockRecorder is the mock recorder for MockFRRClient.
type MockFRRClientMockRecorder struct {
	mock *MockFRRClient
}

// NewMockFRRClient creates a new mock instance.
func NewMockFRRClient(ctrl *gomock.Controller) *MockFRRClient {
	mock := &MockFRRClient{ctrl: ctrl}
	mock.recorder = &MockFRRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFRRClient) EXPECT() *MockFRRClientMockRecorder {
	return m.recorder
}

// ExecuteWithJSON mocks base method.
func (m *MockFRRClient) ExecuteWithJSON(args []string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteWithJSON", args)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ExecuteWithJSON indicates an expected call of ExecuteWithJSON.
func (mr *MockFRRClientMockRecorder) ExecuteWithJSON(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWithJSON", reflect.TypeOf((*MockFRRClient)(nil).ExecuteWithJSON), args)
}
