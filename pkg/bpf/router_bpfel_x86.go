// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadRouter returns the embedded CollectionSpec for router.
func loadRouter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_RouterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load router: %w", err)
	}

	return spec, err
}

// loadRouterObjects loads router and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*routerObjects
//	*routerPrograms
//	*routerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadRouterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadRouter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// routerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type routerSpecs struct {
	routerProgramSpecs
	routerMapSpecs
}

// routerSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type routerProgramSpecs struct {
	TcRouterFunc *ebpf.ProgramSpec `ebpf:"tc_router_func"`
}

// routerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type routerMapSpecs struct {
	EbpfFibLkupStatsMap *ebpf.MapSpec `ebpf:"ebpf_fib_lkup_stats_map"`
	EbpfRetStatsMap     *ebpf.MapSpec `ebpf:"ebpf_ret_stats_map"`
	LookupPort          *ebpf.MapSpec `ebpf:"lookup_port"`
}

// routerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadRouterObjects or ebpf.CollectionSpec.LoadAndAssign.
type routerObjects struct {
	routerPrograms
	routerMaps
}

func (o *routerObjects) Close() error {
	return _RouterClose(
		&o.routerPrograms,
		&o.routerMaps,
	)
}

// routerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadRouterObjects or ebpf.CollectionSpec.LoadAndAssign.
type routerMaps struct {
	EbpfFibLkupStatsMap *ebpf.Map `ebpf:"ebpf_fib_lkup_stats_map"`
	EbpfRetStatsMap     *ebpf.Map `ebpf:"ebpf_ret_stats_map"`
	LookupPort          *ebpf.Map `ebpf:"lookup_port"`
}

func (m *routerMaps) Close() error {
	return _RouterClose(
		m.EbpfFibLkupStatsMap,
		m.EbpfRetStatsMap,
		m.LookupPort,
	)
}

// routerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadRouterObjects or ebpf.CollectionSpec.LoadAndAssign.
type routerPrograms struct {
	TcRouterFunc *ebpf.Program `ebpf:"tc_router_func"`
}

func (p *routerPrograms) Close() error {
	return _RouterClose(
		p.TcRouterFunc,
	)
}

func _RouterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed router_bpfel_x86.o
var _RouterBytes []byte
