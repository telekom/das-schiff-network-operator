// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadNwopbpf returns the embedded CollectionSpec for nwopbpf.
func loadNwopbpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_NwopbpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load nwopbpf: %w", err)
	}

	return spec, err
}

// loadNwopbpfObjects loads nwopbpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*nwopbpfObjects
//	*nwopbpfPrograms
//	*nwopbpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadNwopbpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadNwopbpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// nwopbpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type nwopbpfSpecs struct {
	nwopbpfProgramSpecs
	nwopbpfMapSpecs
}

// nwopbpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type nwopbpfProgramSpecs struct {
	HandleNeighborReplyXdp *ebpf.ProgramSpec `ebpf:"handle_neighbor_reply_xdp"`
	TcRouterFunc           *ebpf.ProgramSpec `ebpf:"tc_router_func"`
}

// nwopbpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type nwopbpfMapSpecs struct {
	EbpfFibLkupStatsMap *ebpf.MapSpec `ebpf:"ebpf_fib_lkup_stats_map"`
	EbpfRetStatsMap     *ebpf.MapSpec `ebpf:"ebpf_ret_stats_map"`
	LookupPort          *ebpf.MapSpec `ebpf:"lookup_port"`
	NeighborRingbuf     *ebpf.MapSpec `ebpf:"neighbor_ringbuf"`
}

// nwopbpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadNwopbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type nwopbpfObjects struct {
	nwopbpfPrograms
	nwopbpfMaps
}

func (o *nwopbpfObjects) Close() error {
	return _NwopbpfClose(
		&o.nwopbpfPrograms,
		&o.nwopbpfMaps,
	)
}

// nwopbpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadNwopbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type nwopbpfMaps struct {
	EbpfFibLkupStatsMap *ebpf.Map `ebpf:"ebpf_fib_lkup_stats_map"`
	EbpfRetStatsMap     *ebpf.Map `ebpf:"ebpf_ret_stats_map"`
	LookupPort          *ebpf.Map `ebpf:"lookup_port"`
	NeighborRingbuf     *ebpf.Map `ebpf:"neighbor_ringbuf"`
}

func (m *nwopbpfMaps) Close() error {
	return _NwopbpfClose(
		m.EbpfFibLkupStatsMap,
		m.EbpfRetStatsMap,
		m.LookupPort,
		m.NeighborRingbuf,
	)
}

// nwopbpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadNwopbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type nwopbpfPrograms struct {
	HandleNeighborReplyXdp *ebpf.Program `ebpf:"handle_neighbor_reply_xdp"`
	TcRouterFunc           *ebpf.Program `ebpf:"tc_router_func"`
}

func (p *nwopbpfPrograms) Close() error {
	return _NwopbpfClose(
		p.HandleNeighborReplyXdp,
		p.TcRouterFunc,
	)
}

func _NwopbpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed nwopbpf_bpfel_x86.o
var _NwopbpfBytes []byte
