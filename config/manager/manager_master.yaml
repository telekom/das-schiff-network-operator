apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: master
  namespace: system
  labels:
    app.kubernetes.io/component: master
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: master
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app.kubernetes.io/component: master
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      - effect: NoSchedule
        key: node.schiff.telekom.de/uninitialized
        operator: Exists
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        effect: NoSchedule
        operator: Exists
      hostNetwork: true
      hostPID: true
      containers:
      - command:
        - /manager
        args:
          - -only-attach-bpf
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: controller:latest
        name: manager
        securityContext:
          privileged: true
          runAsUser: 0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 7081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 7081
          initialDelaySeconds: 5
          periodSeconds: 10
        # TODO(user): Configure the resources accordingly based on the project requirements.
        # More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /opt/network-operator/config.yaml
          name: network-config
          subPath: config.yaml
        - mountPath: /var/run/frr
          name: frr-run
        - mountPath: /etc/frr
          name: frr-config
      - command:
        - /frr-exporter
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: STATUS_SVC_NAME
          value: network-operator-status
        - name: STATUS_SVC_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: frr-exporter:latest
        name: frr-exporter
        securityContext:
          privileged: true
          runAsUser: 0
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 10m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/frr
          name: frr-config
        - mountPath: /var/run/frr
          name: frr-run
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: frr-config
        hostPath:
          path: /etc/frr
          type: Directory
      - name: frr-run
        hostPath:
          path: /var/run/frr
          type: Directory
      - configMap:
          name: network-operator-config
        name: network-config
